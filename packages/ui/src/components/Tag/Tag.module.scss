@use '../../styles/mixins' as mixins;
@use './variables' as variables;
@use '../../library/Button/mixins' as buttonMixins;
@use '../../styles/placeholders';

.tag__close-button {
  @include buttonMixins.phantomButtonStyle;
  margin-left: 0.25rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin tag($appearance) {
  display: flex;
  align-items: center;

  width: fit-content;
  min-width: 4rem;
  height: max-content;
  padding: 0.125rem 0.5rem;
  justify-content: center;
  text-align: center;

  @if $appearance == 'filled' {
    background-color: variables.$rothkoBackground;
    color: variables.$rothkoForeground;
    @extend %text-children-style;

    @each $kind in variables.$rothkoKinds {
      &--#{$kind} {
        background-color: variables.safeGetTheme($kind);
        color: variables.safeGetThemeForeground($kind);
        @include mixins.semanticTextChildren($kind: $kind, $foreground: true);
      }
    }
  } @else {
    background-color: transparent;
    color: variables.$rothkoBackground;
    @include mixins.textChildrenColor($color: variables.$rothkoBackground);

    @each $kind in variables.$rothkoKinds {
      &--#{$kind} {
        color: variables.safeGetTheme($kind);
        @include mixins.semanticTextChildren($kind: $kind, $foreground: false);
      }
    }
  }

  border: 1px solid variables.$rothkoBorder;

  @each $kind in variables.$rothkoKinds {
    &--#{$kind} {
      border-color: variables.safeGetTheme($kind);
    }
  }

  border-radius: 50vh;
}

.tag--filled {
  @include tag('filled');
}

.tag--outline {
  @include tag('outlined');
}
