@use './variables' as variables;
@use '../Typography/mixins' as typographyMixins;
@use '../../library/Button/mixins' as buttonMixins;
@use '../../styles/mixins' as mixins;
@use '../../styles/placeholders';

.modal {
  border-radius: 0.125rem; // 2px
  backface-visibility: hidden;

  width: 100%;
  max-height: calc(100vh - 1rem);
  position: relative;

  background-color: variables.$modalBackground;
  margin: auto;

  overflow: scroll;
  scrollbar-width: thin;
  z-index: 2;
  user-select: text;

  will-change: transform, opacity;
  transition-property: transform, opacity;
  transition-timing-function: cubic-bezier(0.2, 0.8, 0.4, 1);

  & > svg {
    fill: variables.$modalForeground;
  }

  @extend %text-children-style;
}

@each $size in variables.$rothkoSizes {
  .modal--#{$size} {
    @if map-has-key(variables.$modalPaddingSizeMap, $size) {
      padding: map-get(variables.$modalPaddingSizeMap, $size);
    }
    @if map-has-key(variables.$modalMaxWidthSizeMap, $size) {
      max-width: map-get(variables.$modalMaxWidthSizeMap, $size);
    }
  }
}

@each $size in variables.$rothkoSizes {
  .modal__header--#{$size} {
    @if ($size == 'xs') {
      @include typographyMixins.boldFontStyle();
    }
    @if map-has-key(variables.$modalHeaderMarginSizeMap, $size) {
      margin: map-get(variables.$modalHeaderMarginSizeMap, $size);
    }
    @if map-has-key(variables.$modalHeaderLineHeightSizeMap, $size) {
      line-height: map-get(variables.$modalHeaderLineHeightSizeMap, $size);
    }
    @if map-has-key(variables.$modalHeaderFontSizeSizeMap, $size) {
      font-size: map-get(variables.$modalHeaderFontSizeSizeMap, $size);
    }
  }
}

.modal__close-button {
  @include buttonMixins.phantomButtonStyle();
  position: absolute;
  top: 14px;
  right: 16px;
}
