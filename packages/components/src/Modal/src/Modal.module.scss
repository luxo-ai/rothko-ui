@use './variables' as variables;
@use '../../../styles/mixins' as mixins;
@use '../../../styles/placeholders';

.modal {
  @extend %text-children-style;

  backface-visibility: hidden;

  position: relative;
  width: 100%;
  max-height: calc(100vh - 1rem);

  border-radius: variables.$modalBorderRadius;
  background-color: variables.$modalBackground;
  margin: auto;

  overflow: scroll;
  user-select: text;

  will-change: transform, opacity;
  transition-property: transform, opacity;
  transition-timing-function: cubic-bezier(0.2, 0.8, 0.4, 1);
}

@each $size in variables.$rothkoSizes {
  .modal--#{$size} {
    @if map-has-key(variables.$modalPaddingSizeMap, $size) {
      padding: map-get(variables.$modalPaddingSizeMap, $size);
    }
    @if map-has-key(variables.$modalMaxWidthSizeMap, $size) {
      max-width: map-get(variables.$modalMaxWidthSizeMap, $size);
    }
  }
}

.modal__header {
  @include mixins.optimizeLegibility;
  font-family: variables.$regularFont;
  color: variables.$modalForeground;

  @each $size in variables.$rothkoSizes {
    &--#{$size} {
      @if ($size == 'xs') {
        font-family: variables.$boldFont;
        font-weight: bold;
      }
      @if map-has-key(variables.$modalHeaderMarginSizeMap, $size) {
        margin: map-get(variables.$modalHeaderMarginSizeMap, $size);
      }
      @if map-has-key(variables.$modalHeaderLineHeightSizeMap, $size) {
        line-height: map-get(variables.$modalHeaderLineHeightSizeMap, $size);
      }
      @if map-has-key(variables.$modalHeaderFontSizeSizeMap, $size) {
        font-size: map-get(variables.$modalHeaderFontSizeSizeMap, $size);
      }
    }
  }
}

.modal__body {
  font-family: variables.$regularFont;
  color: variables.$bodyColor;
  font-size: variables.$bodyFontSize;
  line-height: variables.$bodyLineHeight;
}

.modal__close-button {
  position: absolute;
  top: 14px;
  right: 16px;
}
